{"mappings":"AAKA,MAAMA,EAAY,CAChB,CAAEC,MAAO,SAAUC,KAAM,WAAYC,KAAM,KAAMC,OAAQ,MACzD,CAAEH,MAAO,QAASC,KAAM,SAAUC,KAAM,KAAMC,OAAQ,MACtD,CAAEH,MAAO,UAAWC,KAAM,UAAWC,KAAM,KAAMC,OAAQ,MACzD,CAAEH,MAAO,QAASC,KAAM,QAASC,KAAM,KAAMC,OAAQ,MACrD,CAAEH,MAAO,WAAYC,KAAM,SAAUC,KAAM,KAAMC,OAAQ,MACzD,CAAEH,MAAO,WAAYC,KAAM,aAAcC,KAAM,KAAMC,OAAQ,MAC7D,CAAEH,MAAO,MAAOC,KAAM,SAAUC,KAAM,KAAMC,OAAQ,MACpD,CAAEH,MAAO,YAAaC,KAAM,WAAYC,KAAM,KAAMC,OAAQ,MAC5D,CAAEH,MAAO,MAAOC,KAAM,WAAYC,KAAM,KAAMC,OAAQ,MACtD,CAAEH,MAAO,WAAYC,KAAM,QAASC,KAAM,KAAMC,OAAQ,MACxD,CAAEH,MAAO,OAAQC,KAAM,UAAWC,KAAM,KAAMC,OAAQ,MACtD,CAAEH,MAAO,QAASC,KAAM,cAAeC,KAAM,KAAMC,OAAQ,OAiDvDC,EAAUL,EAAUM,QACxBC,GAAYA,EAASJ,MAAQ,MAAQI,EAASJ,KAAO,OAGvDK,QAAQC,MAAMJ,GAId,MAAMK,EAAYV,EAAUW,KAC1BJ,GAAY,GAAGA,EAASN,SAASM,EAASL,SAE5CM,QAAQI,IAAIF,GAYZ,MAAMG,EAAUb,EAAUc,MAAK,CAACC,EAAGC,IAAOD,EAAEZ,KAAOa,EAAEb,KAAO,GAAI,IAChEK,QAAQC,MAAMI,GAId,MAAMI,EAAajB,EAAUkB,QAAO,CAACC,EAAOZ,IACnCY,GAASZ,EAASH,OAASG,EAASJ,OAC1C,GAEHK,QAAQI,IAAIK,GAGZ,MAAMG,EAASpB,EAAUc,MAAK,SAAUC,EAAGC,GAGzC,OAFqBD,EAAEX,OAASW,EAAEZ,KACba,EAAEZ,OAASY,EAAEb,MACG,EAAK,C,IAE5CK,QAAQC,MAAMW,GAad,MAAMC,EAnGS,CACb,mBACA,eACA,eACA,iBACA,kBACA,iBACA,cACA,gBACA,oBACA,kBACA,kBACA,eACA,mBACA,gBACA,kBACA,mBACA,iBACA,aACA,gBACA,cACA,gBACA,eACA,cACA,cACA,kBACA,aACA,iBACA,cACA,cACA,iBACA,iBACA,oBACA,aACA,gBACA,sBACA,kBACA,iBACA,qBACA,cACA,iBACA,iBA0DmBP,MAAK,CAACQ,EAASC,KAClC,MAAOC,EAAOC,GAAUH,EAAQI,MAAM,OAC/BC,EAAOC,GAAUL,EAAQG,MAAM,MACtC,OAAOF,EAAQG,EAAQ,GAAI,CAAE,IAE/BnB,QAAQI,IAAIS,GAIZ,MAkBMQ,EAlBO,CACX,MACA,MACA,QACA,QACA,OACA,OACA,MACA,MACA,OACA,OACA,MACA,MACA,MACA,QACA,aAG0BX,QAAO,SAAUY,EAAKC,GAKhD,OAJKD,EAAIC,KACPD,EAAIC,GAAQ,GAEdD,EAAIC,KACGD,C,GACN,IAEHtB,QAAQI,IAAIiB","sources":["src/04_Array_Cardio_Day_1/Array_Cardio_Day_1.js"],"sourcesContent":["// Get your shorts on - this is an array workout!\n// ## Array Cardio Day 1\n\n// Some data we can work with\n\nconst inventors = [\n  { first: 'Albert', last: 'Einstein', year: 1879, passed: 1955 },\n  { first: 'Isaac', last: 'Newton', year: 1643, passed: 1727 },\n  { first: 'Galileo', last: 'Galilei', year: 1564, passed: 1642 },\n  { first: 'Marie', last: 'Curie', year: 1867, passed: 1934 },\n  { first: 'Johannes', last: 'Kepler', year: 1571, passed: 1630 },\n  { first: 'Nicolaus', last: 'Copernicus', year: 1473, passed: 1543 },\n  { first: 'Max', last: 'Planck', year: 1858, passed: 1947 },\n  { first: 'Katherine', last: 'Blodgett', year: 1898, passed: 1979 },\n  { first: 'Ada', last: 'Lovelace', year: 1815, passed: 1852 },\n  { first: 'Sarah E.', last: 'Goode', year: 1855, passed: 1905 },\n  { first: 'Lise', last: 'Meitner', year: 1878, passed: 1968 },\n  { first: 'Hanna', last: 'HammarstrÃ¶m', year: 1829, passed: 1909 },\n];\n\nconst people = [\n  'Bernhard, Sandra',\n  'Bethea, Erin',\n  'Becker, Carl',\n  'Bentsen, Lloyd',\n  'Beckett, Samuel',\n  'Blake, William',\n  'Berger, Ric',\n  'Beddoes, Mick',\n  'Beethoven, Ludwig',\n  'Belloc, Hilaire',\n  'Begin, Menachem',\n  'Bellow, Saul',\n  'Benchley, Robert',\n  'Blair, Robert',\n  'Benenson, Peter',\n  'Benjamin, Walter',\n  'Berlin, Irving',\n  'Benn, Tony',\n  'Benson, Leana',\n  'Bent, Silas',\n  'Berle, Milton',\n  'Berry, Halle',\n  'Biko, Steve',\n  'Beck, Glenn',\n  'Bergman, Ingmar',\n  'Black, Elk',\n  'Berio, Luciano',\n  'Berne, Eric',\n  'Berra, Yogi',\n  'Berry, Wendell',\n  'Bevan, Aneurin',\n  'Ben-Gurion, David',\n  'Bevel, Ken',\n  'Biden, Joseph',\n  'Bennington, Chester',\n  'Bierce, Ambrose',\n  'Billings, Josh',\n  'Birrell, Augustine',\n  'Blair, Tony',\n  'Beecher, Henry',\n  'Biondo, Frank',\n];\n\n// Array.prototype.filter()\n// 1. Filter the list of inventors for those who were born in the 1500's\nconst fifteen = inventors.filter(\n  inventor => inventor.year >= 1500 && inventor.year < 1600\n);\n\nconsole.table(fifteen);\n\n// Array.prototype.map()\n// 2. Give us an array of the inventor first and last names\nconst fullNames = inventors.map(\n  inventor => `${inventor.first} ${inventor.last}`\n);\nconsole.log(fullNames);\n\n// Array.prototype.sort()\n// 3. Sort the inventors by birthdate, oldest to youngest\n// const ordered = inventors.sort(function(a, b) {\n//   if(a.year > b.year) {\n//     return 1;\n//   } else {\n//     return -1;\n//   }\n// });\n\nconst ordered = inventors.sort((a, b) => (a.year > b.year ? 1 : -1));\nconsole.table(ordered);\n\n// Array.prototype.reduce()\n// 4. How many years did all the inventors live?\nconst totalYears = inventors.reduce((total, inventor) => {\n  return total + (inventor.passed - inventor.year);\n}, 0);\n\nconsole.log(totalYears);\n\n// 5. Sort the inventors by years lived\nconst oldest = inventors.sort(function (a, b) {\n  const lastInventor = a.passed - a.year;\n  const nextInventor = b.passed - b.year;\n  return lastInventor > nextInventor ? -1 : 1;\n});\nconsole.table(oldest);\n\n// 6. create a list of Boulevards in Paris that contain 'de' anywhere in the name\n// https://en.wikipedia.org/wiki/Category:Boulevards_in_Paris\n\n// const category = document.querySelector('.mw-category');\n// const links = Array.from(category.querySelectorAll('a'));\n// const de = links\n//             .map(link => link.textContent)\n//             .filter(streetName => streetName.includes('de'));\n\n// 7. sort Exercise\n// Sort the people alphabetically by last name\nconst alpha = people.sort((lastOne, nextOne) => {\n  const [aLast, aFirst] = lastOne.split(', ');\n  const [bLast, bFirst] = nextOne.split(', ');\n  return aLast > bLast ? 1 : -1;\n});\nconsole.log(alpha);\n\n// 8. Reduce Exercise\n// Sum up the instances of each of these\nconst data = [\n  'car',\n  'car',\n  'truck',\n  'truck',\n  'bike',\n  'walk',\n  'car',\n  'van',\n  'bike',\n  'walk',\n  'car',\n  'van',\n  'car',\n  'truck',\n  'pogostick',\n];\n\nconst transportation = data.reduce(function (obj, item) {\n  if (!obj[item]) {\n    obj[item] = 0;\n  }\n  obj[item]++;\n  return obj;\n}, {});\n\nconsole.log(transportation);\n"],"names":["$37ea7f53b5236fa6$var$inventors","first","last","year","passed","$37ea7f53b5236fa6$var$fifteen","filter","inventor","console","table","$37ea7f53b5236fa6$var$fullNames","map","log","$37ea7f53b5236fa6$var$ordered","sort","a","b","$37ea7f53b5236fa6$var$totalYears","reduce","total","$37ea7f53b5236fa6$var$oldest","$37ea7f53b5236fa6$var$alpha","lastOne","nextOne","aLast","aFirst","split","bLast","bFirst","$37ea7f53b5236fa6$var$transportation","obj","item"],"version":3,"file":"index.faf40d53.js.map"}